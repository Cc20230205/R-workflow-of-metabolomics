#this file is named MS2 since the role of it is to get MS2 spectrum derived from each MS1#


#Understanding of data#
First of all, we have to know that raw data of MS/MS anlaysis can not be analyzed by R directly.
Usually, when you open the raw data, you can find profile MS data, like total ion chromatogram (TIC). But the profile MS data can not be recognized by R.
In fact, R can recognize centriod MS data, so raw data must be converted into centriod data prior to do anlayze with R.
Generally, centriod MS data is a three-dimensional bar diagram, like a bar diagram with X, Y, Z axis. 
X axis indicates retention time (rt), 
Y axis indicates mass to charge (mz),
Z axis indicates intensity.
Ideally, different MS1 has different rt, so we could separate each MS1 by comparing their rt.


#Conversion of data format#
Different machine leads to different data format. Please check it before starting your conversion of data format.
Taking Q Exactive Orbitrap Mass Spectrometers (MS) as an example. Mscovert is used to transform raw data into mzML data format by adding peak picking option.
Mscovert could be downloaded in ProteoWizard (https://proteowizard.sourceforge.io/)


#packages and code#
Note: this code almost completely comes from Dr. Johannes Rainer but some changes. Therefore, if you want to study it seriously, seeing his version is essential.
The following is the links about his version for this code:
1) https://bioconductor.org/packages/release/bioc/vignettes/xcms/inst/doc/xcms.html#LC-MS_data_pre-processing_and_analysis_with_xcms
2) https://bioconductor.org/packages/release/bioc/vignettes/xcms/inst/doc/xcms-lcms-ms.html#LC-MSMS_data_analysis_with_xcms

setwd("D:/Rdata")
library(xcms)
library("magrittr")
library(Spectra)

raw_data <- readMSData("./GA/leaf.mzML", mode = "onDisk")
#here we just input one sample called leaf. In spite of we could also input several samples at the same time, it would not be helpful for getting MS2 spectrum
as much as possible.

raw_data <- filterRt(raw_data, c(120, 3500))
raw_data <- filterMz(raw_data, c(120, 500))
#you can also select a range of time or mz

table(msLevel(raw_data))
#check the number of spectra for each MS level

cwp <- CentWaveParam(snthresh = 5, noise = 100, ppm = 10, peakwidth = c(3, 30))
#parameters:
  #snthresh: set the signal to noise ratio cutoff 
  #peakwidth: set the width of a peak, here I set the peakwidth as 3 to 30s. Be careful to the number, which is quite important for the result.

dda_data=findChromPeaks(raw_data, param = cwp)
#extract peaks
dda_data@msFeatureData[["chromPeaks"]] %>% head()
#look at the peaklist
dda_data@msFeatureData[["chromPeaks"]] %>% nrow()
#check the number of peaks

mpp <- MergeNeighboringPeaksParam(expandRt = 4)
#set the parameters of integrating peak
  #expandRt: expand peakwidth of peak-extracting

xdata_pp <- refineChromPeaks(dda_data, mpp)
#integrate peaks

xdata <- xdata_pp

pdp <- PeakDensityParam(sampleGroups = c(1), minFraction = 0.4, bw = 30)
#set the parameters of peak-grouping

xdata_group <- groupChromPeaks(xdata, param = pdp)
#group peaks

xdata_fill <- fillChromPeaks(xdata_group, param = ChromPeakAreaParam())
#fill peaks

dda_spectra <- chromPeakSpectra(xdata_fill, method = "closest_rt")
#extract MS2 spectra
  #method: choose the method of extracting MS2 spectra. Be careful of the parameter, it's very important.

write.csv(dda_spectra %>% filterMsLevel(2L) %>% precursorMz(), file = "all_precursorMz.csv")
#extract all precursors of these spectra
write.csv(dda_spectra %>% filterMsLevel(2L) %>% rtime(), file = "all_rtime.csv")
#extract all retention time of these precursors
writeMgfData(dda_spectra, con = "all_spectra.mgf", COM = NULL, TITLE = NULL)
#extract all spectra

#############################################################################################################
Basic analysis of MS data
#############################################################################################################
#extract BPC and plot
bpis_adj <- chromatogram(xdata, aggregationFun = "max", include = "none")
par(mfrow = c(1, 1))
group_colors=c("grey", "red", "grey", "grey")
plot(bpis_adj, col = group_colors[bpis_adj$sample_group])
plot(bpis_adj, col = c("grey", "red", "grey", "grey"))
legend(x = 'topleft', 
       legend = c(expression(BVCHS2), expression(GMCHS14), expression(MTCHS1), expression(MTCHS2)),
       lty = 1, col = c("grey", "red", "grey", "grey"), bty = 'n')
#set legend

#extract EIC and plot
chr_157.918 <- chromatogram(raw_data, mz = c(157.918, 157.919))
plot(chr_157.918, col = c("grey", "red", "grey", "grey"))

If you want to know the spectrum of the peak
first, check the number of the peak
chromPeaks(xdata_pp, mz = c(243.02, 243.021), ppm = 10)
second, extract its spectrum
ex_spectra_243.02_1 <- dda_spectra[mcols(dda_spectra)$peak_id == "CP224"]
plot(ex_spectra_243.02_1[[1]])

If you want to compare two spectra
plot(ex_spectra_243.02_1[[1]], ex_spectra_259.02_1[[1]], main="A against B")

If you want to get the similarity of two spectra
compareSpectra(ex_spectra_243.02_1[[1]],ex_spectra_259.02_1[[1]], binSize = 0.02, fun = "dotproduct")










